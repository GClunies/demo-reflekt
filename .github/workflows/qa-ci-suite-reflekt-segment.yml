name: QA CI Suite - Reflekt <-> Segment
on:
  pull_request:
    branches:
      - main

jobs:
  test-and-sync-plan-changes-qa:
    name: Test and Sync Tracking Plan Changes to QA
    strategy:
      fail-fast: false
      matrix:
        os: ['ubuntu-latest']
        python-version: ['3.9']
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Get entire history

      - name: Install Python ${{ matrix.python-version }}
        uses: actions/setup-python@v3
        with:
          python: ${{ matrix.python-version }}

      - name: Install Reflekt
        run: |
          pip install reflekt

      - name: CI Setup - make reflekt_config.yml for CI suite
        run: |
          mkdir /home/runner/.reflekt
          echo "${{ secrets.CI_REFLEKT_CONFIG_YML }}" > /home/runner/.reflekt/reflekt_config.yml

      - name: Sleep 3 seconds
        run: |
          sleep 3

      - name: CI Setup - set config_path in reflekt_project.yml
        uses: jacobtomlinson/gha-find-replace@2.0.0
        with:
          find: "# config_path: /absolute/path/to/reflekt_config.yml"
          replace: "config_path: /home/runner/.reflekt/reflekt_config.yml"
          include: "reflekt_project.yml"  # Only search this file

      - name: Sleep 3 seconds
        run: |
          sleep 3

      # - name: 'QA CI Suite: Reflekt <-> Segment Protocols'
      #   run: |
      #     ./ci_reflekt_segment_qa.sh

      - name: QA CI Suite - Reflekt <-> Segment Protocols
        run: |
          echo "$(date +"%T") QA CI Suite: Reflekt <-> Segment Protocols"
          echo "$(date +"%T")"
          echo "$(date +"%T") Searching Reflekt project for tracking plans..."
          echo "$(date +"%T")"
          plans=$(ls -- tracking-plans | grep -v avo)  # Ignore my-avo-plan
          pr_branch=$(git symbolic-ref --short HEAD)   # Set name of PR branch
          main_branch="origin/main"                    # Set main branch
          base_ref="${{ github.base_ref }}"
          head_ref="${{ github.head_ref }}"

          # Get a list of tracking plans
          if [ -z "${plans}" ]; then
              echo "$(date +"%T")     No tracking plans found in 'tracking-plans/'!"
              exit 1  # Exit if no tracking plans found
          fi

          echo "$(date +"%T") Found tracking plans:"

          for plan in ${plans}; do
              echo "$(date +"%T")     ${plan}"
          done;

          # Loop the tracking plans
          for plan in ${plans}; do
              echo "$(date +"%T")"
              echo "$(date +"%T") Searching tracking plan '${plan}' for changes..."

              # Build out --update args for reflekt push
              update_str=""
              update_events=$(git diff ${base_ref} ${head_ref} --name-only --diff-filter=AMR -- tracking-plans/${plan}/events)
              update_traits=$(git diff ${base_ref} ${head_ref} --name-only --diff-filter=AMR -- tracking-plans/${plan}/user-traits.yml tracking-plans/${plan}/group-traits.yml)
              # updates=("${update_events[@]}" "${update_traits[@]}")

              # for update_file in ${updates}; do
              #     update_name=$(basename ${update_file} .yml)
              #     update_str="$update_str-u ${update_name} "
              # done;

              echo "$(date +"%T") Searching for new/updated events or traits..."

              for update_file in ${update_events}; do
                  update_name=$(basename ${update_file} .yml)
                  update_str="$update_str-u ${update_name} "
              done;

              for update_file in ${update_traits}; do
                  update_name=$(basename ${update_file} .yml)
                  update_str="$update_str-u ${update_name} "
              done;

              # Run reflekt push with --update args
              if [ "${update_str}" != "" ]; then
                  echo "$(date +"%T") Found new/updated events or traits. Running Reflekt command:\n$(date +"%T")\n$(date +"%T")     reflekt push -n ${plan} ${update_str}-t ${plan}-qa"
                  echo "$(date +"%T")"
                  reflekt push -n ${plan} ${update_str} -t ${plan}-qa
                  echo "$(date +"%T")"
              else
                  echo "$(date +"%T")     No new/updated events or traits found."
              fi

              # Build out --remove args for reflekt push
              remove_str=""
              remove_events=$(git diff ${base_ref} ${head_ref} --name-only --diff-filter=D -- tracking-plans/${plan}/events)
              remove_traits=$(git diff ${base_ref} ${head_ref} --name-only --diff-filter=D -- tracking-plans/${plan}/user-traits.yml tracking-plans/${plan}/group-traits.yml)
              # removals=("${remove_events[@]}" "${remove_traits[@]}")

              # for removal_file in ${removals}; do
              #     removal_name=$(basename ${removal_file} .yml)
              #     remove_str="$remove_str-r ${removal_name} "
              # done;

              echo "$(date +"%T") Checking for removed events or traits..."

              for removal_file in ${remove_events}; do
                  removal_name=$(basename ${removal_file} .yml)
                  remove_str="$remove_str-r ${removal_name} "
              done;

              for removal_file in ${remove_traits}; do
                  removal_name=$(basename ${removal_file} .yml)
                  remove_str="$remove_str-r ${removal_name} "
              done;

              # Run reflekt push with --remove args
              if [ "${remove_str}" != "" ]; then
                  echo "$(date +"%T") Found removed events or traits.Running Reflekt command:\n$(date +"%T")\n$(date +"%T")     reflekt push -n ${plan} ${remove_str}-t ${plan}-qa"
                  echo "$(date +"%T")"
                  reflekt push -n ${plan} ${remove_str} -t ${plan}-qa
                  echo "$(date +"%T")"
              else
                  echo "$(date +"%T")     No removed events or traits found."
              fi

          done;

